{
  "version": 3,
  "sources": ["../../js/proof-of-work.mjs", "../../js/proof-of-work-slow.mjs", "../../js/bench.mjs"],
  "sourcesContent": ["export default function process(\n  data,\n  difficulty = 5,\n  signal = null,\n  progressCallback = null,\n  threads = Math.max(navigator.hardwareConcurrency / 2, 1),\n) {\n  console.debug(\"fast algo\");\n  return new Promise((resolve, reject) => {\n    let webWorkerURL = URL.createObjectURL(\n      new Blob([\"(\", processTask(), \")()\"], { type: \"application/javascript\" }),\n    );\n\n    const workers = [];\n    let settled = false;\n\n    const cleanup = () => {\n      if (settled) {\n        return;\n      }\n      settled = true;\n      workers.forEach((w) => w.terminate());\n      if (signal != null) {\n        signal.removeEventListener(\"abort\", onAbort);\n      }\n      URL.revokeObjectURL(webWorkerURL);\n    };\n\n    const onAbort = () => {\n      console.log(\"PoW aborted\");\n      cleanup();\n      reject(new DOMException(\"Aborted\", \"AbortError\"));\n    };\n\n    if (signal != null) {\n      if (signal.aborted) {\n        return onAbort();\n      }\n      signal.addEventListener(\"abort\", onAbort, { once: true });\n    }\n\n    for (let i = 0; i < threads; i++) {\n      let worker = new Worker(webWorkerURL);\n\n      worker.onmessage = (event) => {\n        if (typeof event.data === \"number\") {\n          progressCallback?.(event.data);\n        } else {\n          cleanup();\n          resolve(event.data);\n        }\n      };\n\n      worker.onerror = (event) => {\n        cleanup();\n        reject(event);\n      };\n\n      worker.postMessage({\n        data,\n        difficulty,\n        nonce: i,\n        threads,\n      });\n\n      workers.push(worker);\n    }\n  });\n}\n\nfunction processTask() {\n  return function () {\n    const sha256 = (text) => {\n      const encoded = new TextEncoder().encode(text);\n      return crypto.subtle.digest(\"SHA-256\", encoded.buffer);\n    };\n\n    function uint8ArrayToHexString(arr) {\n      return Array.from(arr)\n        .map((c) => c.toString(16).padStart(2, \"0\"))\n        .join(\"\");\n    }\n\n    addEventListener(\"message\", async (event) => {\n      let data = event.data.data;\n      let difficulty = event.data.difficulty;\n      let hash;\n      let nonce = event.data.nonce;\n      let threads = event.data.threads;\n\n      const threadId = nonce;\n      let localIterationCount = 0;\n\n      while (true) {\n        const currentHash = await sha256(data + nonce);\n        const thisHash = new Uint8Array(currentHash);\n        let valid = true;\n\n        for (let j = 0; j < difficulty; j++) {\n          const byteIndex = Math.floor(j / 2); // which byte we are looking at\n          const nibbleIndex = j % 2; // which nibble in the byte we are looking at (0 is high, 1 is low)\n\n          let nibble =\n            (thisHash[byteIndex] >> (nibbleIndex === 0 ? 4 : 0)) & 0x0f; // Get the nibble\n\n          if (nibble !== 0) {\n            valid = false;\n            break;\n          }\n        }\n\n        if (valid) {\n          hash = uint8ArrayToHexString(thisHash);\n          console.log(hash);\n          break;\n        }\n\n        nonce += threads;\n\n        // send a progress update every 1024 iterations so that the user can be informed of\n        // the state of the challenge.\n        if (threadId == 0 && localIterationCount === 1024) {\n          postMessage(nonce);\n          localIterationCount = 0;\n        }\n        localIterationCount++;\n      }\n\n      postMessage({\n        hash,\n        data,\n        difficulty,\n        nonce,\n      });\n    });\n  }.toString();\n}\n", "// https://dev.to/ratmd/simple-proof-of-work-in-javascript-3kgm\n\nexport default function process(\n  data,\n  difficulty = 5,\n  signal = null,\n  progressCallback = null,\n  _threads = 1,\n) {\n  console.debug(\"slow algo\");\n  return new Promise((resolve, reject) => {\n    let webWorkerURL = URL.createObjectURL(\n      new Blob([\"(\", processTask(), \")()\"], { type: \"application/javascript\" }),\n    );\n\n    let worker = new Worker(webWorkerURL);\n    let settled = false;\n\n    const cleanup = () => {\n      if (settled) return;\n      settled = true;\n      worker.terminate();\n      if (signal != null) {\n        signal.removeEventListener(\"abort\", onAbort);\n      }\n      URL.revokeObjectURL(webWorkerURL);\n    };\n\n    const onAbort = () => {\n      console.log(\"PoW aborted\");\n      cleanup();\n      reject(new DOMException(\"Aborted\", \"AbortError\"));\n    };\n\n    if (signal != null) {\n      if (signal.aborted) {\n        return onAbort();\n      }\n      signal.addEventListener(\"abort\", onAbort, { once: true });\n    }\n\n    worker.onmessage = (event) => {\n      if (typeof event.data === \"number\") {\n        progressCallback?.(event.data);\n      } else {\n        cleanup();\n        resolve(event.data);\n      }\n    };\n\n    worker.onerror = (event) => {\n      cleanup();\n      reject(event);\n    };\n\n    worker.postMessage({\n      data,\n      difficulty,\n    });\n  });\n}\n\nfunction processTask() {\n  return function () {\n    const sha256 = (text) => {\n      const encoded = new TextEncoder().encode(text);\n      return crypto.subtle.digest(\"SHA-256\", encoded.buffer).then((result) =>\n        Array.from(new Uint8Array(result))\n          .map((c) => c.toString(16).padStart(2, \"0\"))\n          .join(\"\"),\n      );\n    };\n\n    addEventListener(\"message\", async (event) => {\n      let data = event.data.data;\n      let difficulty = event.data.difficulty;\n\n      let hash;\n      let nonce = 0;\n      do {\n        if ((nonce & 1023) === 0) {\n          postMessage(nonce);\n        }\n        hash = await sha256(data + nonce++);\n      } while (\n        hash.substring(0, difficulty) !== Array(difficulty + 1).join(\"0\")\n      );\n\n      nonce -= 1; // last nonce was post-incremented\n\n      postMessage({\n        hash,\n        data,\n        difficulty,\n        nonce,\n      });\n    });\n  }.toString();\n}\n", "import processFast from \"./proof-of-work.mjs\";\nimport processSlow from \"./proof-of-work-slow.mjs\";\n\nconst defaultDifficulty = 4;\nconst algorithms = {\n  fast: processFast,\n  slow: processSlow,\n};\n\nconst status = document.getElementById(\"status\");\nconst difficultyInput = document.getElementById(\"difficulty-input\");\nconst algorithmSelect = document.getElementById(\"algorithm-select\");\nconst compareSelect = document.getElementById(\"compare-select\");\nconst header = document.getElementById(\"table-header\");\nconst headerCompare = document.getElementById(\"table-header-compare\");\nconst results = document.getElementById(\"results\");\n\nconst setupControls = () => {\n  difficultyInput.value = defaultDifficulty;\n  for (const alg of Object.keys(algorithms)) {\n    const option1 = document.createElement(\"option\");\n    algorithmSelect.append(option1);\n    const option2 = document.createElement(\"option\");\n    compareSelect.append(option2);\n    option1.value = option1.innerText = option2.value = option2.innerText = alg;\n  }\n};\n\nconst benchmarkTrial = async (stats, difficulty, algorithm, signal) => {\n  if (!(difficulty >= 1)) {\n    throw new Error(`Invalid difficulty: ${difficulty}`);\n  }\n  const process = algorithms[algorithm];\n  if (process == null) {\n    throw new Error(`Unknown algorithm: ${algorithm}`);\n  }\n\n  const rawChallenge = new Uint8Array(32);\n  crypto.getRandomValues(rawChallenge);\n  const challenge = Array.from(rawChallenge)\n    .map((c) => c.toString(16).padStart(2, \"0\"))\n    .join(\"\");\n\n  const t0 = performance.now();\n  const { hash, nonce } = await process(challenge, Number(difficulty), signal);\n  const t1 = performance.now();\n  console.log({ hash, nonce });\n\n  stats.time += t1 - t0;\n  stats.iters += nonce;\n\n  return { time: t1 - t0, nonce };\n};\n\nconst stats = { time: 0, iters: 0 };\nconst comparison = { time: 0, iters: 0 };\nconst updateStatus = () => {\n  const mainRate = stats.iters / stats.time;\n  const compareRate = comparison.iters / comparison.time;\n  if (Number.isFinite(mainRate)) {\n    status.innerText = `Average hashrate: ${mainRate.toFixed(3)}kH/s`;\n    if (Number.isFinite(compareRate)) {\n      const change = ((mainRate - compareRate) / mainRate) * 100;\n      status.innerText += ` vs ${compareRate.toFixed(3)}kH/s (${change.toFixed(2)}% change)`;\n    }\n  } else {\n    status.innerText = \"Benchmarking...\";\n  }\n};\n\nconst tableCell = (text) => {\n  const td = document.createElement(\"td\");\n  td.innerText = text;\n  td.style.padding = \"0 0.25rem\";\n  return td;\n};\n\nconst benchmarkLoop = async (controller) => {\n  const difficulty = difficultyInput.value;\n  const algorithm = algorithmSelect.value;\n  const compareAlgorithm = compareSelect.value;\n  updateStatus();\n\n  try {\n    const { time, nonce } = await benchmarkTrial(\n      stats,\n      difficulty,\n      algorithm,\n      controller.signal,\n    );\n\n    const tr = document.createElement(\"tr\");\n    tr.style.display = \"contents\";\n    tr.append(tableCell(`${time}ms`), tableCell(nonce));\n\n    // auto-scroll to new rows\n    const atBottom =\n      results.scrollHeight - results.clientHeight <= results.scrollTop;\n    results.append(tr);\n    if (atBottom) {\n      results.scrollTop = results.scrollHeight - results.clientHeight;\n    }\n    updateStatus();\n\n    if (compareAlgorithm !== \"NONE\") {\n      const { time, nonce } = await benchmarkTrial(\n        comparison,\n        difficulty,\n        compareAlgorithm,\n        controller.signal,\n      );\n      tr.append(tableCell(`${time}ms`), tableCell(nonce));\n    }\n  } catch (e) {\n    if (e !== false) {\n      status.innerText = e;\n    }\n    return;\n  }\n\n  await benchmarkLoop(controller);\n};\n\nlet controller = null;\nconst reset = () => {\n  stats.time = stats.iters = 0;\n  comparison.time = comparison.iters = 0;\n  results.innerHTML = status.innerText = \"\";\n\n  const table = results.parentElement;\n  if (compareSelect.value !== \"NONE\") {\n    table.style.gridTemplateColumns = \"repeat(4,auto)\";\n    header.style.display = \"none\";\n    headerCompare.style.display = \"contents\";\n  } else {\n    table.style.gridTemplateColumns = \"repeat(2,auto)\";\n    header.style.display = \"contents\";\n    headerCompare.style.display = \"none\";\n  }\n\n  if (controller != null) {\n    controller.abort();\n  }\n  controller = new AbortController();\n  void benchmarkLoop(controller);\n};\n\nsetupControls();\ndifficultyInput.addEventListener(\"change\", reset);\nalgorithmSelect.addEventListener(\"change\", reset);\ncompareSelect.addEventListener(\"change\", reset);\nreset();\n"],
  "mappings": "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",
  "names": ["process", "data", "difficulty", "signal", "progressCallback", "threads", "resolve", "reject", "webWorkerURL", "processTask", "workers", "settled", "cleanup", "w", "onAbort", "i", "worker", "event", "sha256", "text", "encoded", "uint8ArrayToHexString", "arr", "c", "hash", "nonce", "threadId", "localIterationCount", "currentHash", "thisHash", "valid", "j", "byteIndex", "nibbleIndex", "process", "data", "difficulty", "signal", "progressCallback", "_threads", "resolve", "reject", "webWorkerURL", "processTask", "worker", "settled", "cleanup", "onAbort", "event", "sha256", "text", "encoded", "result", "c", "hash", "nonce", "defaultDifficulty", "algorithms", "process", "status", "difficultyInput", "algorithmSelect", "compareSelect", "header", "headerCompare", "results", "setupControls", "alg", "option1", "option2", "benchmarkTrial", "stats", "difficulty", "algorithm", "signal", "rawChallenge", "challenge", "c", "t0", "hash", "nonce", "t1", "comparison", "updateStatus", "mainRate", "compareRate", "change", "tableCell", "text", "td", "benchmarkLoop", "controller", "compareAlgorithm", "time", "tr", "atBottom", "e", "reset", "table"]
}
